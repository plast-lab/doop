#include "../commonMacros.dl"

#ifdef SOUFFLE_INCREMENTAL_OUTPUT
#include "../addons/souffle-incremental-output/incr-output.dl"
#endif

#include "main-declarations.dl"

.comp AbstractContextSensitivity<Configuration> {
#include "class-initialization-declarations.dl"
#include "implicit-reachable-declarations.dl"
#include "threads-declarations.dl"
#include "api-mocking.dl"
#ifdef ANDROID
#include "android-declarations.dl"
#include "android.dl"
#endif // ANDROID

#ifndef DISABLE_POINTS_TO
#include "string-concat.dl"
#endif // DISABLE_POINTS_TO
#include "exceptions.dl"
#include "method-handles.dl"

#if defined(REFLECTION)
#include "reflection/declarations.dl"
#endif // REFLECTION

#ifdef SCALER_PRE_ANALYSIS
#include "scaler-pre-analysis.dl"
#endif // SCALER_PRE_ANALYSIS

#ifdef GENERICS_PRE_ANALYSIS
#include "generics-pre-analysis.dl"
#endif // GENERICS_PRE_ANALYSIS

#ifdef X_ZIPPER_PRE_ANALYSIS
#include "zipper-pre-analysis.dl"
#endif // X_ZIPPER_PRE_ANALYSIS

  .decl FakeInvocation_RegisterFinalize0(?heap:HeapAllocation, ?invo:MethodInvocation)

  .decl FakeInvocation_RegisterFinalize(?value:Value, ?invo:MethodInvocation)

  .decl Value_isHeap(?value:Value)
  .decl Value_isMock(?value:Value)

  // Value_Num maps each numeric constant to a value while
  // also prepending it with *num-constant-* to distinguish it
  // from heap allocations that share the same string value.
  .decl Value_Num(?value:Value, ?const:symbol, ?valueType:Type)

  .decl Value_isNonHeap(?value:Value)

  // Special value objects are just artificial ones that we use to find where the
  // result of a reflective call can flow to. We don't want to track them
  // through the heap.
  .decl NotSpecialObject(?value:Value)

  .decl Value_Type(?value:Value, ?type:Type)
  .decl Value_DeclaringType(?value:Value, ?type:Type)

  // [Miscellaneous]
  .decl Value_Null(?null:Value)

#include "context-sensitivity-declarations.dl"
#include "../commonMacros.dl"
#include "prologue.dl"
#include "context-sensitivity.dl"
#include "full-call-graph.dl"
#include "export.dl"

#if defined(REFLECTION)
#include "reflection-subsumption/rules.dl"
#elif defined(LIGHT_REFLECTION_GLUE)
#include "reflection/light-Class.dl"
#include "reflection/light-reflection-glue.dl"
#endif // REFLECTION / LIGHT_REFLECTION_GLUE

// Dynamic proxies supports two kinds of reflection: standard reflection and
// light reflection (just Class object handling or light-reflection-glue).
#ifdef REFLECTION_DYNAMIC_PROXIES

// If no reflection support is available, at least handle Class objects.
#if !defined(REFLECTION) && !defined(LIGHT_REFLECTION_GLUE)
#include "reflection/light-Class.dl"
#endif // REFLECTION, LIGHT_REFLECTION_GLUE

#include "reflection/dynamic-proxies.dl"
#include "reflection/dynamic-proxies-delta.dl"

#endif // REFLECTION_DYNAMIC_PROXIES

#ifdef TAMIFLEX
#include "../addons/tamiflex/declarations.dl"
#include "../addons/tamiflex/rules.dl"
#endif // TAMIFLEX
#if defined(DACAPO) || defined(DACAPO_BACH)
#include "../addons/dacapo/rules.dl"
#endif // DACAPO, DACAPO_BACH

#include "app-only.dl"

#include "phantom-dead.dl"

  .init configuration = Configuration
}

#ifdef X_ORACULAR_HEURISTICS
#include "../addons/oracular/oracular-heuristics.dl"
#endif // X_ORACULAR_HEURISTICS

#ifdef X_CONTEXT_DEPENDENCY_HEURISTIC
#include "../addons/oracular/2-object-ctx-dependency-heuristic.dl"
#endif // X_CONTEXT_DEPENDENCY_HEURISTIC

#ifdef X_SERVER_LOGIC
#include "../addons/server-logic/queries.dl"
#endif // X_SERVER_LOGIC

#ifdef CONSTANT_FOLDING
#include "../addons/constant-folding/analysis.dl"
#endif // CONSTANT_FOLDING

#ifdef SYMBOLIC_REASONING
#include "../addons/symbolic-reasoning/analysis.dl"
#endif // SYMBOLIC_REASONING

#ifdef GENERATE_OPTIMIZATION_DIRECTIVES
#include "../addons/opt-directives/keep.dl"
#include "../addons/opt-directives/directives.dl"
#endif // GENERATE_OPTIMIZATION_DIRECTIVES

#ifdef SARIF
#include "../addons/sarif/sarif.dl"
#endif // SARIF

