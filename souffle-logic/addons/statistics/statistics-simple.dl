#include "statistics-output.dl"
#include "statistics-simple-declarations.dl"
#include "macros.dl"

/***************************************************
 * Variables
 ***************************************************/
// Stats_Simple_JavaUtilInsensVarPointsTo(?value, ?var) :-
//   Stats_Simple_JavaUtilVarPointsTo(_, ?value, _, ?var).

// Stats_Simple_JavaUtilVarPointsTo(?hctx, ?value, ?ctx, ?var) :-
//   Method_DeclaringType(?method, ?type),
//   match("java[.]util[.].*", ?type),
//   Var_DeclaringMethod(?var, ?method),
//   mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?var).

Stats_Simple_InsensVarPointsTo(?value, ?var) :-
  mainAnalysis.VarPointsTo(_, ?value, _, ?var).

Stats_Simple_AssignedVariable(?var) :-
  Stats_Simple_InsensVarPointsTo(_, ?var).

Stats_Simple_Application_InsensVarPointsTo(?value, ?var),
Stats_Simple_Application_VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  ApplicationVar(?var),
  mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?var).

Stats_Simple_InsensReachableVar(?var),
Stats_Simple_ReachableVar(?ctx, ?var) :-
  Stats_Simple_AssignedVariable(?var),
  Var_DeclaringMethod(?var, ?method),
  mainAnalysis.ReachableContext(?ctx, ?method).

#ifdef TRANSFORM_INPUT
// Example of post-processing of set-based transform results for client analyses
// that need it.
Stats_Simple_InsensVarPointsTo(?value, ?var) :-
  DupCopies(?var, ?var2),
  mainAnalysis.VarPointsTo(_, ?value, _, ?var2).
#endif // TRANSFORM_INPUT

/***************************************************
 * Arrays
 ***************************************************/

Stats_Simple_InsensArrayIndexPointsTo(?value, ?basevalue) :-
   mainAnalysis.ArrayIndexPointsTo(_, ?value, _, ?basevalue).

Stats_Simple_Application_InsensArrayIndexPointsTo(?value, ?basevalue),
Stats_Simple_Application_ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue) :-
  ApplicationMethod(?meth),
  mainAnalysis.AssignNormalHeapAllocation(?basevalue, _, ?meth),
  mainAnalysis.ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue).

#ifndef DISABLE_POINTS_TO

/***************************************************
 * Fields
 ***************************************************/

Stats_Simple_InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue) :-
  mainAnalysis.InstanceFieldPointsTo(_, ?value, ?sig, _, ?basevalue).

Stats_Simple_InsensStaticFieldPointsTo(?value, ?sig) :-
  mainAnalysis.StaticFieldPointsTo(_, ?value, ?sig).

Stats_Simple_Application_InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue),
Stats_Simple_Application_InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue) :-
  ApplicationMethod(?meth),
  mainAnalysis.AssignNormalHeapAllocation(?basevalue, _, ?meth),
  mainAnalysis.InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue).

#endif // DISABLE_POINTS_TO

/***************************************************
 * Call graph edges
 ***************************************************/

Stats_Simple_InsensCallGraphEdge(?from, ?to) :-
   mainAnalysis.CallGraphEdge(_, ?from, _, ?to).

Stats_Simple_VirtualCallGraphEdge(?from, ?to) :-
   Stats_Simple_ReachableVirtualMethodInvocation(?from),
   Stats_Simple_InsensCallGraphEdge(?from, ?to).

/***************************************************
 * Application methods
 ***************************************************/

Stats_Simple_InsensReachableApplicationMethod(?method),
Stats_Simple_ReachableApplicationMethod(?ctx, ?method) :-
  ApplicationMethod(?method),
  mainAnalysis.ReachableContext(?ctx, ?method).

Stats_Simple_ApplicationConcreteMethod(?method) :-
  ApplicationMethod(?method),
  !Method_Modifier("abstract", ?method).

Stats_Simple_NonReachableApplicationConcreteMethod(?method) :-
  Stats_Simple_ApplicationConcreteMethod(?method),
  !Stats_Simple_InsensReachableApplicationMethod(?method).

#ifdef ANDROID
// Extra metric to only show non-reachable concrete methods in the
// main package of an Android app.
Stats_Simple_NonReachableAndroidApplicationConcreteMethod(?method) :-
  Stats_Simple_NonReachableApplicationConcreteMethod(?method),
  Method_DeclaringType(?method, ?class),
  mainAnalysis.ApplicationPackageRegex(?regex),
  match(?regex, ?class).
#endif // ANDROID

/***************************************************
 * Virtual method invocations
 ***************************************************/

Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :-
  mainAnalysis.Reachable(?method),
  Instruction_Method(?invocation, ?method),
  isVirtualMethodInvocation_Insn(?invocation).

Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :-
  Stats_Simple_InsensReachableApplicationMethod(?method),
  Instruction_Method(?invocation, ?method),
  isVirtualMethodInvocation_Insn(?invocation).

Stats_Simple_VirtualTargets(?from, ?c) :-
  Stats_Simple_VirtualCallGraphEdge(?from, _),
  ?c = count : Stats_Simple_VirtualCallGraphEdge(?from, _).

Stats_Simple_PolymorphicCallSite(?from) :-
  Stats_Simple_VirtualTargets(?from, ?size),
  ?size > 1.

/// Too slow for large programs!
// Stats_Simple_PolymorphicCallSite(?from) :-
//   Stats_Simple_VirtualCallGraphEdge(?from, ?to1),
//   Stats_Simple_VirtualCallGraphEdge(?from, ?to2),
//   ord(?to1) < ord(?to2).
  
Stats_Simple_NullVirtualMethodInvocation(?invocation) :-
  mainAnalysis.Value_Null(?null),
  Stats_Simple_InsensVarPointsTo(?null, ?base),
  VirtualMethodInvocation_Base(?invocation, ?base),
  Stats_Simple_ReachableVirtualMethodInvocation(?invocation).

Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :-
  Stats_Simple_ReachableVirtualMethodInvocation(?invocation),
  VirtualMethodInvocation_Base(?invocation, ?base),
  !Stats_Simple_InsensVarPointsTo(_, ?base).

Stats_Simple_Application_VirtualMethodInvocation(?invocation) :-
  ApplicationMethod(?method),
  Instruction_Method(?invocation, ?method),
  isVirtualMethodInvocation_Insn(?invocation).

Stats_Simple_Application_PolymorphicCallSite(?from) :-
  Stats_Simple_PolymorphicCallSite(?from),
  Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).

Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :-
  mainAnalysis.Value_Null(?null),
  Stats_Simple_InsensVarPointsTo(?null, ?base),
  VirtualMethodInvocation_Base(?invocation, ?base),
  Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).

Stats_Simple_Application_EmptyReachableVirtualMethodInvocation(?invocation) :-
  Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),
  VirtualMethodInvocation_Base(?invocation, ?base),
  !Stats_Simple_InsensVarPointsTo(_, ?base).

/***************************************************
 * Casts
 ***************************************************/

Stats_Simple_ReachableCast(?inmethod, ?type, ?to, ?from) :-
  Stats_Simple_AssignedVariable(?from),
  AssignCast(?type, ?from, ?to, ?inmethod),
  mainAnalysis.Reachable(?inmethod).

Stats_Simple_PotentiallyFailingCast(?type, ?from, ?to) :-
  Stats_Simple_ReachableCast(_, ?type, ?to, ?from),
  Stats_Simple_InsensVarPointsTo(?value, ?from),
  mainAnalysis.Value_Type(?value, ?valuetype),
  !basic.SupertypeOf(?type, ?valuetype).

Stats_Simple_Application_Cast(?type, ?from, ?to, ?inmethod) :-
  ApplicationMethod(?inmethod),
  AssignCast(?type, ?from, ?to, ?inmethod).

Stats_Simple_Application_ReachableCast(?inmethod, ?type, ?to, ?from) :-
  ApplicationMethod(?inmethod),
  Stats_Simple_ReachableCast(?inmethod, ?type, ?to, ?from).

Stats_Simple_Application_ReachableMethod(?method) :-
  mainAnalysis.Reachable(?method),
  ApplicationMethod(?method).

Stats_Simple_Application_PotentiallyFailingCast(?type, ?from, ?to) :-
  Stats_Simple_Application_ReachableCast(_, ?type, ?to, ?from),
  Stats_Simple_InsensVarPointsTo(?value, ?from),
  mainAnalysis.Value_Type(?value, ?valuetype),
  !basic.SupertypeOf(?type, ?valuetype).

/***************************************************/
#ifndef DISABLE_POINTS_TO
NewMetricMacro( "1.0", "var points-to (INS)", Stats_Simple_InsensVarPointsTo(_, _)).
NewMetricMacro( "1.5", "var points-to (SENS)", mainAnalysis.VarPointsTo(_, _, _, _)).
NewMetricMacro( "5.0", "app var points-to (INS)", Stats_Simple_Application_InsensVarPointsTo(_, _)).
NewMetricMacro( "5.5", "app var points-to (SENS)", Stats_Simple_Application_VarPointsTo(_, _, _, _)).
// NewMetricMacro( "5.7", "java.util var points-to (INS)", Stats_Simple_JavaUtilInsensVarPointsTo(_, _)).
// NewMetricMacro( "5.8", "java.util var points-to (SENS)", Stats_Simple_JavaUtilVarPointsTo(_, _, _, _)).
NewMetricMacro("10.0", "reachable variables (INS)", Stats_Simple_InsensReachableVar(_)).
NewMetricMacro("10.5", "reachable variables (SENS)", Stats_Simple_ReachableVar(_, _)).

NewMetricMacro( "2.0", "array index points-to (INS)", Stats_Simple_InsensArrayIndexPointsTo(_, _)).
NewMetricMacro( "2.5", "array index points-to (SENS)", mainAnalysis.ArrayIndexPointsTo(_, _, _, _)).
NewMetricMacro( "6.0", "app array index points-to (INS)", Stats_Simple_Application_InsensArrayIndexPointsTo(_, _)).
NewMetricMacro( "6.5", "app array index points-to (SENS)", Stats_Simple_Application_ArrayIndexPointsTo(_, _, _, _)).

NewMetricMacro( "3.0", "instance field points-to (INS)", Stats_Simple_InsensInstanceFieldPointsTo(_, _, _)).
NewMetricMacro( "3.5", "instance field points-to (SENS)", mainAnalysis.InstanceFieldPointsTo(_, _, _, _, _)).

NewMetricMacro( "4.0", "static field points-to (INS)", Stats_Simple_InsensStaticFieldPointsTo(_, _)).
NewMetricMacro( "4.5", "static field points-to (SENS)", mainAnalysis.StaticFieldPointsTo(_, _, _)).

NewMetricMacro( "7.0", "app instance field points-to (INS)", Stats_Simple_Application_InsensInstanceFieldPointsTo(_, _, _)).
NewMetricMacro( "7.5", "app instance field points-to (SENS)", Stats_Simple_Application_InstanceFieldPointsTo(_, _, _, _, _)).
#endif // DISABLE_POINTS_TO

NewMetricMacro( "8.0", "call graph edges (INS)", Stats_Simple_InsensCallGraphEdge(_, _)).
NewMetricMacro( "8.5", "call graph edges (SENS)", mainAnalysis.CallGraphEdge(_, _, _, _)).
NewMetricMacro( "9.0", "non-reachable app concrete methods", Stats_Simple_NonReachableApplicationConcreteMethod(_)).
NewMetricMacro("11.0", "reachable methods (INS)", mainAnalysis.Reachable(_)).
NewMetricMacro("11.5", "reachable methods (SENS)", mainAnalysis.ReachableContext(_, _)).
NewMetricMacro("11.75", "total methods", isMethod(_)).


NewMetricMacro("12.0", "virtual call sites (statically)", isVirtualMethodInvocation_Insn(_)).
NewMetricMacro("13.0", "reachable virtual call sites", Stats_Simple_ReachableVirtualMethodInvocation(_)).
NewMetricMacro("14.0", "polymorphic virtual call sites", Stats_Simple_PolymorphicCallSite(_)).
NewMetricMacro("15.0", "null virtual call sites", Stats_Simple_NullVirtualMethodInvocation(_)).
NewMetricMacro("15.5", "empty virtual call sites", Stats_Simple_EmptyVirtualMethodInvocation(_)).
NewMetricMacro("16.0", "app virtual call sites (statically)", Stats_Simple_Application_VirtualMethodInvocation(_)).
NewMetricMacro("17.0", "app reachable virtual call sites", Stats_Simple_Application_ReachableVirtualMethodInvocation(_)).
NewMetricMacro("18.0", "app polymorphic virtual call sites", Stats_Simple_Application_PolymorphicCallSite(_)).
NewMetricMacro("19.0", "app null virtual call sites", Stats_Simple_Application_NullVirtualMethodInvocation(_)).
NewMetricMacro("19.5", "app empty reachable virtual call sites", Stats_Simple_Application_EmptyReachableVirtualMethodInvocation(_)).

NewMetricMacro("20.0", "casts (statically)", AssignCast(_, _, _, _)).
NewMetricMacro("21.0", "reachable casts", Stats_Simple_ReachableCast(_, _, _, _)).
NewMetricMacro("22.0", "reachable casts that may fail", Stats_Simple_PotentiallyFailingCast(_, _, _)).
NewMetricMacro("23.0", "app casts (statically)", Stats_Simple_Application_Cast(_, _, _, _)).
NewMetricMacro("24.0", "app reachable casts", Stats_Simple_Application_ReachableCast(_, _, _, _)).
NewMetricMacro("25.0", "app reachable casts that may fail", Stats_Simple_Application_PotentiallyFailingCast(_, _, _)).
NewMetricMacro("25.5", "app reachable methods", Stats_Simple_Application_ReachableMethod(_)).
NewMetricMacro("25.75", "app concrete methods", Stats_Simple_ApplicationConcreteMethod(_)).

//NewMetricMacro("50.0", "call sites that did (not) get refined", SiteToRefine(_)).
//NewMetricMacro("51.0", "allocation sites that did (not) get refined", ValueToRefine(_)).

/***************************************************
 * Android
 ***************************************************/

#ifdef ANDROID
NewMetricMacro("26.0", "Android activities", Activity(_)).
NewMetricMacro("26.1", "Android broadcast receivers", BroadcastReceiver(_)).
NewMetricMacro("26.2", "Android content providers", ContentProvider(_)).
NewMetricMacro("26.3", "Android services", Service(_)).
NewMetricMacro("26.4", "Android layout controls", LayoutControl(_, _, _)).
NewMetricMacro("26.5", "Android sensitive layout controls", SensitiveLayoutControl(_, _, _)).
NewMetricMacro("26.6", "Android callback methods", mainAnalysis.AndroidCallbackMethod(_, _)).
NewMetricMacro("26.7", "Android typed fragments", mainAnalysis.XMLFragment_Class(_, _, _)).
NewMetricMacro("26.8", "methods considered obfuscated", mainAnalysis.ObfuscatedApplicationClass(_)).
NewMetricMacro("26.9", "methods considered unobfuscated", mainAnalysis.UnobfuscatedApplicationClass(_)).
NewMetricMacro("26.10", "obfuscation (boolean)", mainAnalysis.ObfuscationOn()).
NewMetricMacro("26.11", "non-reachable app concrete methods (in app package)", Stats_Simple_NonReachableAndroidApplicationConcreteMethod(_)).
#endif // ANDROID

/***************************************************
 * Reflection
 ***************************************************/

#ifdef REFLECTION
Stats_Simple_Reflection_InsensArrayIndexPointsTo(?value, ?basevalue),
Stats_Simple_Reflection_ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue) :-
  mainAnalysis.ReflectiveValue(?value),
  mainAnalysis.ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue).

Stats_Simple_Reflection_InsensVarPointsTo(?value, ?var),
Stats_Simple_Reflection_VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  mainAnalysis.ReflectiveValue(?value),
  mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?var).

#ifndef DISABLE_POINTS_TO
Stats_Simple_Reflection_InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue),
Stats_Simple_Reflection_InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue) :-
  mainAnalysis.ReflectiveValue(?value),
  mainAnalysis.InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue).
#endif // DISABLE_POINTS_TO

Stats_Simple_forName(?invocation) :-
  mainAnalysis.java_lang_Class_forName(?invocation, ?inmethod),
  mainAnalysis.Reachable(?inmethod).

Stats_Simple_Class_newInstance(?invocation) :-
  mainAnalysis.java_lang_Class_newInstance(?invocation, _, ?from),
  Var_DeclaringMethod(?from, ?inmethod),
  mainAnalysis.Reachable(?inmethod).

Stats_Simple_Constructor_newInstance(?invocation) :-
  mainAnalysis.java_lang_reflect_Constructor_newInstance(?invocation, _, ?from),
  Var_DeclaringMethod(?from, ?inmethod),
  mainAnalysis.Reachable(?inmethod).

#ifndef DISABLE_POINTS_TO
NewMetricMacro("30.0", "var points-to (to a reflective value) (INS)", Stats_Simple_Reflection_InsensVarPointsTo(_, _)).
NewMetricMacro("30.5", "var points-to (to a reflective value) (SENS)", Stats_Simple_Reflection_VarPointsTo(_, _, _, _)).
NewMetricMacro("31.0", "array index points-to (to a reflective value) (INS)", Stats_Simple_Reflection_InsensArrayIndexPointsTo(_, _)).
NewMetricMacro("31.5", "array index points-to (to a reflective value) (SENS)", Stats_Simple_Reflection_ArrayIndexPointsTo(_, _, _, _)).
NewMetricMacro("32.0", "instance field points-to (to a reflective value) (INS)", Stats_Simple_Reflection_InsensInstanceFieldPointsTo(_, _, _)).
NewMetricMacro("32.5", "instance field points-to (to a reflective value) (SENS)", Stats_Simple_Reflection_InstanceFieldPointsTo(_, _, _, _, _)).
#endif // DISABLE_POINTS_TO

NewMetricMacro("35.0", "reachable 'forName' (INS)", Stats_Simple_forName(_)).
NewMetricMacro("36.0", "reachable 'Class.newInstance' (INS)", Stats_Simple_Class_newInstance(_)).
NewMetricMacro("37.0", "reachable 'Constructor.newInstance' (INS)", Stats_Simple_Constructor_newInstance(_)).
#endif // REFLECTION

/***************************************************
 * Information Flow
 ***************************************************/

#ifdef INFORMATION_FLOW
Stats_Simple_InsensTaintedVarPointsTo(?value, ?var) :-
  TaintedVarPointsTo(?value, _, ?var).

Stats_Simple_Application_InsensTaintedVarPointsTo(?value, ?var),
Stats_Simple_Application_TaintedVarPointsTo(?value, ?ctx, ?var) :-
  ApplicationMethod(?meth),
  Var_DeclaringMethod(?var, ?meth),
  TaintedVarPointsTo(?value, ?ctx, ?var).

Stats_Simple_LeakingTaintedInformation(?invocation, ?objStr) :-
  LeakingTaintedInformation(_, _, _, ?invocation, ?objStr).

Stats_Simple_OriginalTaintedValue(?id) :-
  SourceFromTaintedValue(_, ?id).

NewMetricMacro("40.0", "tainted flows-to (INS)", Stats_Simple_InsensTaintedVarPointsTo(_, _)).
NewMetricMacro("40.5", "tainted flows-to (SENS)", TaintedVarPointsTo(_, _, _)).
NewMetricMacro("41.0", "app tainted flows-to (INS)", Stats_Simple_Application_InsensTaintedVarPointsTo(_, _)).
NewMetricMacro("41.5", "app tainted flows-to (SENS)", Stats_Simple_Application_TaintedVarPointsTo(_, _, _)).
NewMetricMacro("42.0", "total tainted values", TaintedValue(_)).
NewMetricMacro("43.0", "original tainted values", Stats_Simple_OriginalTaintedValue(_)).
NewMetricMacro("44.0", "sink variables (SENS)", LeakingSinkVariable(_, _, _, _)).
NewMetricMacro("45.0", "total leaks", Stats_Simple_LeakingTaintedInformation(_, _)).
#endif // INFORMATION_FLOW

/***************************************************
 * Open Programs
 ***************************************************/

NewMetricMacro("61.0", "mock objects", MockObject(_, _)).
NewMetricMacro("61.1", "mock objects for receivers", MockObjFromOpenProgramEntryPointReceiver(_)).
NewMetricMacro("61.2", "mock objects for arg", MockObjFromOpenProgramEntryPointArg(_)).
NewMetricMacro("61.6", "forced-reachable formals that could not be mocked", UnmockableFormalOfForcedReachableContext(_, _)).

#ifdef OPEN_PROGRAMS
//Stats_Simple_ReachableFromOpenProgramEntryPoint(?method) :-
//  MockReachableContext(_, ?method).

//NewMetricMacro("60.0", "Entry Points", OpenProgramEntryPoint(_)).

NewMetricMacro("61.3", "mock objects for fields", MockObjFromField(_)).
NewMetricMacro("61.4", "mock objects for arrays", MockObjFromArray(_)).
NewMetricMacro("61.5", "mock objects for formals", MockObjFromFormal(_)).
//NewMetricMacro("62.0", "Methods Reachable from open entry points (SENS)", MockReachableContext(_,_)).
//NewMetricMacro("62.5", "Methods Reachable from open entry points (INS)", Stats_Simple_ReachableFromOpenProgramEntryPoint(_)).
#endif // OPEN_PROGRAMS

#ifdef SPECIAL_CONTEXT_SENSITIVITY_METHODS

NewMetricMacro("101.0", "context-insensitive methods", mainAnalysis.configuration.ContextInsensitiveMethod(_)).
NewMetricMacro("102.0", "2-object-sensitive methods", mainAnalysis.configuration.TwoObjectMethod(_)).

#ifndef DISABLE_POINTS_TO

Stats_Simple_TwoObjectMethodsVPT(?hctx, ?value, ?ctx, ?var) :-
   mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?var), Var_DeclaringMethod(?var, ?method), mainAnalysis.configuration.TwoObjectMethod(?method).
NewMetricMacro("103.0", "context-insensitive methods total VPT", Stats_Simple_ContextInsensitiveMethodsVPT(_, _, _, _)).

Stats_Simple_ContextInsensitiveMethodsVPT(?hctx, ?value, ?ctx, ?var) :-
   mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?var), Var_DeclaringMethod(?var, ?method), mainAnalysis.configuration.ContextInsensitiveMethod(?method).
NewMetricMacro("104.0", "2-object-sensitive methods total VPT", Stats_Simple_TwoObjectMethodsVPT(_, _, _, _)).

#endif // DISABLE_POINTS_TO

#endif // SPECIAL_CONTEXT_SENSITIVITY_METHODS

/***************************************************
 * Memory Dump
 ***************************************************/

#ifdef HEAPDLS
NewMetricMacro("80.0", "Dynamic Heap Allocations (INS)", DynamicHeapAllocation(_,_)).
NewMetricMacro("81.0", "Dynamic Heap Object (SENS)", DynamicHeapObject(_,_,_)).
NewMetricMacro("82.0", "Unmatched Heap Allocations..", UnmatchedDynamicNormalHeapAllocation(_,_,_,_)).
NewMetricMacro("83.0", "..of which were reconstructed", ReconstructedUnmatchedDynamicHeapAllocation(_, _)).
NewMetricMacro("84.0", "Contexts", isDynamicContext(_)).

NotLibraryHeapAllocation(?heap) :-
  DynamicHeapAllocation(_, ?heap),
  !mainAnalysis.AssignNormalHeapAllocation(?heap, _, _).

// Instance fields
Stats_Simple_InsensDynamicInstanceFieldPointsTo(?fld, ?heap, ?baseHeap) :-
  mainAnalysis.MostPreciseDynamicInstanceFieldPointsTo(?fld, _, ?heap, _, ?baseHeap).

OUTPUT_STATS(mainAnalysis.MostPreciseDynamicInstanceFieldPointsTo)
OUTPUT_STATS(mainAnalysis.MostPreciseDynamicStaticFieldPointsTo)
OUTPUT_STATS(mainAnalysis.MostPreciseDynamicCallGraphEdge)
OUTPUT_STATS(mainAnalysis.MostPreciseDynamicArrayIndexPointsTo)

NotLibraryHeapAllocation(?heap) :-
  ApplicationMethod(?meth),
  mainAnalysis.AssignNormalHeapAllocation(?heap, _, ?meth).

Stats_Simple_Application_InsensDynamicInstanceFieldPointsTo(?baseHeap, ?fld, ?heap) :-
  NotLibraryHeapAllocation(?heap),
  Stats_Simple_InsensDynamicInstanceFieldPointsTo(?fld, ?heap, ?baseHeap).

NewMetricMacro("85.0", "Dynamic instance field points-to (INS)", Stats_Simple_InsensDynamicInstanceFieldPointsTo(_,_,_)).
NewMetricMacro("86.0", "Dynamic instance field points-to (SENS)", mainAnalysis.MostPreciseDynamicInstanceFieldPointsTo(_,_,_,_,_)).

// Static fields
Stats_Simple_InsensDynamicStaticFieldPointsTo(?fld, ?heap) :-
  mainAnalysis.MostPreciseDynamicStaticFieldPointsTo(?fld, _, ?heap).

Stats_Simple_Application_InsensDynamicStaticFieldPointsTo(?fld, ?heap) :-
  Stats_Simple_InsensDynamicStaticFieldPointsTo(?fld, ?heap),
  Field_DeclaringType(?fld, ?cls),
  ApplicationClass(?cls).

NewMetricMacro("87.0", "Dynamic static field points-to (INS)", Stats_Simple_InsensDynamicStaticFieldPointsTo(_,_)).
NewMetricMacro("88.0", "Dynamic static field points-to (SENS)", mainAnalysis.MostPreciseDynamicStaticFieldPointsTo(_,_,_)).
NewMetricMacro("89.0", "App Dynamic static field points-to (INS)", Stats_Simple_Application_InsensDynamicStaticFieldPointsTo(_,_)).

// Array index
Stats_Simple_InsensDynamicArrayIndexPointsTo(?heap, ?baseHeap) :-
  mainAnalysis.MostPreciseDynamicArrayIndexPointsTo(_, ?heap, _, ?baseHeap).

NewMetricMacro("90.0", "Dynamic array index points-to (INS)", Stats_Simple_InsensDynamicArrayIndexPointsTo(_,_)).
NewMetricMacro("91.0", "Dynamic array index points-to (SENS)", mainAnalysis.MostPreciseDynamicArrayIndexPointsTo(_,_,_,_)).

// Call graph and reachability
Stats_Simple_Application_DynamicReachableMethod(?method) :-
  ApplicationMethod(?method),
  DynamicReachableMethod(?method).

Stats_Simple_InsensDynamicCallGraphEdge(?fromMeth, ?invocation, ?toMeth) :-
  mainAnalysis.SanitizedDynamicCallGraphEdge(_, ?toMeth, ?invocation, _, ?fromMeth).

NewMetricMacro("92.0", "Dynamic call graph edges (INS)", Stats_Simple_InsensDynamicCallGraphEdge(_,_,_)).
NewMetricMacro("93.0", "Dynamic call graph edges (SENS)", mainAnalysis.MostPreciseDynamicCallGraphEdge(_,_,_,_,_)).
NewMetricMacro("94.0", "Dynamic reachable methods (INS)", DynamicReachableMethod(_)).
NewMetricMacro("95.0", "App Dynamic reachable methods (INS)", Stats_Simple_Application_DynamicReachableMethod(_)).
NewMetricMacro("96.0", "Unmatched dynamic reachable methods (INS)", UnmatchedDynamicReachableMethod(_)).

#ifdef SCAN_NATIVE_CODE
NewMetricMacro("97.0", "Dynamic call graph edges from native code to Java code", mainAnalysis.NativeToBytecodeDynamicCallGraphEdge(_, _)).
NewMetricMacro("97.1", "Dynamic reachable methods from native code", mainAnalysis.DynamicNativeCodeTarget(_)).
NewMetricMacro("97.2", "Dynamic app-reachable methods from native code", mainAnalysis.DynamicAppNativeCodeTarget(_)).
#endif // SCAN_NATIVE_CODE

.decl Stats_Simple_Application_DynamicCallGraphEdge(?invocation:Instruction, ?toMeth:Method)
OUTPUT_STATS(Stats_Simple_Application_DynamicCallGraphEdge)

Stats_Simple_Application_DynamicCallGraphEdge(?invocation, ?toMeth) :-
  Stats_Simple_InsensDynamicCallGraphEdge(_, ?invocation, ?toMeth),
  ApplicationMethod(?toMeth),
  Instruction_Method(?invocation, ?fromMeth),
  ApplicationMethod(?fromMeth).

#endif // HEAPDLS

.decl Stats_Simple_Application_InsensCallGraphEdge(?invocation:Instruction, ?toMeth:Method)
OUTPUT_STATS(Stats_Simple_Application_InsensCallGraphEdge)

Stats_Simple_Application_InsensCallGraphEdge(?invocation, ?toMeth) :-
  Stats_Simple_InsensCallGraphEdge(?invocation, ?toMeth),
  ApplicationMethod(?toMeth),
  Instruction_Method(?invocation, ?fromMeth),
  ApplicationMethod(?fromMeth).
