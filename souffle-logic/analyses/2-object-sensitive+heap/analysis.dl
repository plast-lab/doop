// Context-sensitive pointer analysis with context of 2 object and a
// context-sensitive heap abstraction.



#ifdef CHOICE_BOUND

#define BOUND_VAR_POINTS_TO(hctx, value, ctx, var) VarPointsTo_Bounded(hctx, value, ctx, var, (ord(value)*ord(hctx)) % 101)

#define CHOICE_CONFIG choice-domain (?ctx, ?var, ?n)
.decl VarPointsTo_Bounded(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var, ?n:number) CHOICE_CONFIG

#endif

// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
.comp TwoObjectSensitivePlusHeapConfiguration : AbstractConfiguration {

  // In this analysis, the real context is a pair of Values and the real
  // heap context a single Value.
  .type Context  = [ value1:Value, value2:Value ]
  .type HContext = [ value:Value ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    ?hctx = [?hctxValue],
    ?calleeCtx = [?hctxValue, ?value],
    ?tomethod = ?tomethod.

  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?calleeCtx = ?callerCtx.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?ctxValue1, ?ctxValue2],
    ?hctx = [?ctxValue2],
    ?ctxValue1 = ?ctxValue1.

  InitContextResponse(?value, ?ctx) :-
    InitContextRequest(?value),
    ?ctx = [?value, ?value].

  InitHContextResponse(?value, ?hctx) :-
    InitHContextRequest(?value),
    ?hctx = [?value].

#ifdef HEAPDLS
  DynamicContextToContext([?value1, ?value2], ?dynCtx) :-
    DynamicContextHeap1(?heap1, ?dynCtx),
    Value_byDynamicHeap(?heap1, ?value1),
    DynamicContextHeap2(?heap2, ?dynCtx),
    Value_byDynamicHeap(?heap2, ?value2).

  DynamicContextToContext([?value, ?any], ?dynCtx) :-
    DynamicContextHeap1(?heap1, ?dynCtx),
    Value_byDynamicHeap(?heap1, ?value),
    !DynamicContextHeap2(_, ?dynCtx),
    isContext([?value, ?any]).

  DynamicContextToContext(?ctx, ?dynCtx) :-
    isDynamicContext(?dynCtx),
    !DynamicContextHeap1(_, ?dynCtx),
    isImmutableContext(?ctx).

  DynamicContextToHContext([?value], ?dynCtx) :-
    Value_byDynamicHeap(?heap1, ?value), 
    DynamicContextHeap1(?heap1, ?dynCtx).

  DynamicContextToHContext(?hctx, ?dynCtx) :-
    isDynamicContext(?dynCtx),
    !DynamicContextHeap1(_, ?dynCtx),
    isImmutableHContext(?hctx).
#endif // HEAPDLS

}

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"