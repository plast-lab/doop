// Context-sensitive pointer analysis with context of 3 object and a
// context-sensitive heap abstraction.

#ifdef CHOICE_BOUND

#define BOUND_VAR_POINTS_TO(hctx, value, ctx, var) VarPointsTo_Bounded(hctx, value, ctx, var, (ord(value)*ord(hctx)) % 101)

#define CHOICE_CONFIG choice-domain (?ctx, ?var, ?n)
.decl VarPointsTo_Bounded(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var, ?n:number) CHOICE_CONFIG

#endif

.comp ThreeObjectSensitivePlusTwoHeapConfiguration : AbstractConfiguration {

  // In this analysis, both the real context and the real heap context are
  // triplets of Values. Keeping mapping functions is the way to handle
  // analyses where HContext = Context (since the language considers them
  // different types).
  .type Context  = [ value1:Value, value2:Value, value3:Value ]
  .type HContext = [ value1:Value, value2:Value ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    ?hctx = [?hctxValue1, ?hctxValue2],
    ?calleeCtx = [?hctxValue1, ?hctxValue2, ?value].

  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?calleeCtx = ?callerCtx.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?ctxValue1, ?ctxValue2, ?ctxValue3],
    ?hctx = [?ctxValue2, ?ctxValue3],
    ?ctxValue1 = ?ctxValue1.

  InitContextResponse(?value, ?ctx) :-
    InitContextRequest(?value),
    ?ctx = [?value, ?value, ?value].

  InitHContextResponse(?value, ?hctx) :-
    InitHContextRequest(?value),
    ?hctx = [?value, ?value].
}

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"