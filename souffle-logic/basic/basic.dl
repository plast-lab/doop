#include "../commonMacros.dl"

.comp Basic {

#include "exceptions.dl"
#include "finalization.dl"
#include "method-lookup.dl"
#include "method-resolution.dl"
#include "type-hierarchy.dl"
#include "native-strings.dl"

.decl AnyMainMethodDeclaration(?method:Method, ?type:ClassType)
AnyMainMethodDeclaration(?method, ?type) :-
   Method_DeclaringType(?method, ?type),
   Method_SimpleName(?method, "main"),
   Method_Descriptor(?method, "void(java.lang.String[])"),
   Method_Modifier("public", ?method),
   Method_Modifier("static", ?method).

.decl MainMethodDeclaration(?method:Method)

.decl DataStructureClass(?class:Type)
DataStructureClass(?class) :-
  isClassType(?class),
  SubtypeOf(?class, ?superclass),
  (?superclass = "java.util.Map";
   ?superclass = "java.util.AbstractMap";
   ?superclass = "java.util.Collection";
   ?superclass = "java.util.Dictionary").

.decl PrecisionCriticalHeapAllocation(?value:Value)

PrecisionCriticalHeapAllocation(?value) :-
  AssignHeapAllocation(?value, _, ?inmethod),
  Method_DeclaringType(?inmethod, ?type),
  DataStructureClass(?type).

MainMethodDeclaration(?method) :-
#ifdef DISCOVER_MAIN_METHODS
  // Consider every main() in the application a "main method".
  ApplicationClass(?type),
#else
  // Use input facts for "main" methods.
  MainClass(?type),
#endif // DISCOVER_MAIN_METHODS
  AnyMainMethodDeclaration(?method, ?type).

#ifdef ANDROID
// Android apps start by running ActivityThread.main() or other
// internal entry points.
// TODO: this rule should only fire when analyzing an APK, not an AAR.
MainMethodDeclaration(?method) :-
  ( ?method = "<android.app.ActivityThread: void main(java.lang.String[])>"
  ; ?method = "<com.android.internal.os.RuntimeInit: void main(java.lang.String[])>"),
  isMethod(?method).
#endif // ANDROID

}

.init basic = Basic

#ifdef CFG_ANALYSIS
#include "../addons/cfg-analysis/analysis.dl"
#endif
